# External Method that creates the yearly folders that 
#   live under each event grouping and seminar series folder.
#
# The script has a predefined list of folders to work with
#   and loops through them adding the next year's folder
#   to each one assuming there is a current year folder
#   already there.

# @author Paul Rentschler <par117@psu.edu>
# @since 14 July 2010

import datetime
import DateTime



def addYearFolders(self):
    """Defines all the folders to be processed and then loops
       through them adding the next year's subfolder to it
       assuming that the subfolder isn't already there and
       that the current year subfolder is present."""

    thisYear = datetime.datetime.now().year

    foldersToProcess = [
                         'calendar',
                         'education/ecology/events/ecology-colloquium-schedule',
                         'education/plant-biology/seminars/past',
                       ]    
    #processFolder(client, '/huck/calendar', thisYear)
    #processFolder(client, '/huck/calendar/other-types-of-event', thisYear)
    #processFolder(client, '/huck/calendar/training-and-orientation-events', thisYear)
    #processFolder(self, 'calendar/conferences-and-workshops', thisYear)
    
    for aFolder in foldersToProcess:
        processFolder(self, aFolder, thisYear)

    print "Done!\n\n"



def processFolder(self, folderUrl, thisYear):
    """Looks at the specified folder to see if there are any folders with
       an id of 2007 through the next year.
       If there are not, a recursive call is made to any subfolders.
       If there are and the current year folder exists but not next year's
       folder, then next year's folder is created. The collection is copied
       and modified from the current year."""

    # define next year based on the provided "thisYear"
    nextYear = thisYear + 1

    # get the folder object referenced by the provided url
    print "Getting: %s" % folderUrl
    folder = self.restrictedTraverse(folderUrl)
    
    # make sure that the folderUrl really referenced a folder
    if folder.portal_type == 'Folder':
        # see if the yearly subfolders exist
        thisYearExists = False
        nextYearExists = False
        existingYears = []
        years = range(2007, nextYear)
        for subfolder in folder.listFolderContents():
            for year in years:
                if str(year) == subfolder.id:
                    existingYears.append(year)
                    if year == thisYear:
                        thisYearExists = True
                    elif year == nextYear:
                        nextYearExists = True

        if thisYearExists and not nextYearExists:
            # see if there are events
            thisYearFolderUrl = folderUrl + '/' + str(thisYear)
            thisYearFolder = self.restrictedTraverse(thisYearFolderUrl)
            import pdb; pdb.set_trace();
            
            if thisYearFolder.portal_type == 'Folder':
                # this year's folder exists: create next year's folder
                addNextYearFolder(self, folderUrl, thisYear)
                
        elif not thisYearExists and not nextYearExists and len(existingYears) == 0:
            print "recursively process each subfolder"
            for subfolder in folder.listFolderContents():
                processFolder(self, subfolder.virtual_url_path()[5:], thisYear)




def addNextYearFolder(self, folderUrl, thisYear):
    """Adds a subfolder to the specified folder that is based on
       the specified current year folder."""

    # define next year based on the provided "thisYear"
    nextYear = thisYear + 1
    
    # get the specified folder object and the current year folder object
    folderObj = self.restrictedTraverse(folderUrl)
    thisYearFolder = folderObj[str(thisYear)]


    # add the nextYear folder to the site using information from the thisYear folder
    nextYearFolderId = folderObj.invokeFactory( type_name='Folder', 
                                                id=str(nextYear),
                                                title=str(nextYear),
                                                description=thisYearFolder.Description().replace(str(thisYear), str(nextYear)).strip(),
                                              )
    nextYearFolder = folderObj[nextYearFolderId]
    nextYearFolder.setLocallyAllowedTypes(thisYearFolder.getLocallyAllowedTypes())
    nextYearFolder.setImmediatelyAddableTypes(thisYearFolder.getImmediatelyAddableTypes())
    
    
    # get the collection definition for thisYear
    thisYearCollection = thisYearFolder['full-list']
    
    # add the nextYear collection to the site and make it the default page for the nextYear folder
    nextYearCollectionId = nextYearFolder.invokeFactory( type_name='Topic',
                                                         id='full-list',
                                                         title=thisYearCollection.Title().replace(str(thisYear), str(nextYear)).strip(),
                                                         description=thisYearCollection.Description().replace(str(thisYear), str(nextYear)).strip(),
                                                       )
    nextYearFolder.setDefaultPage(nextYearCollectionId)
    nextYearCollection = nextYearFolder['full-list']
    
    # add the criteria to the nextYearCollection based on the thisYearCollection criteria
    for criterion in thisYearCollection.listCriteria():
        myCriteria = nextYearCollection.addCriterion(str(criterion.field), criterion.portal_type)
        if criterion.portal_type == 'ATPortalTypeCriterion' or \
           criterion.portal_type == 'ATSelectionCriterion':
            try:
                myCriteria.setValue(criterion.value)
            except:
                print "ERROR! Failed to setValue for %s\n" % myCriteria.id
                
        elif criterion.portal_type == 'ATSortCriterion':
            pass
            
        elif criterion.portal_type == 'ATDateRangeCriterion':
            try:
                myCriteria.setStart(DateTime.DateTime(str(nextYear) + '-01-01 12:00:00am'))
                myCriteria.setEnd(DateTime.DateTime(str(nextYear) + '-12-31 11:55:00pm'))
            except:
                print "ERROR! Failed to setStart and/or setEnd for %s\n" % myCriteria.id
                
        elif criterion.portal_type == 'ATPathCriterion':
            try:
                myCriteria.setValue(criterion.Value())
                myCriteria.setRecurse(criterion.Recurse())
            except:
                print "ERROR! Failed to setValue and/or setRecurse for %s\n" % myCriteria.id
                
        else:
            print "NOTICE! No method of handling the criterion for %s\n" % criterion.id
            import pdb; pdb.set_trace()
            
